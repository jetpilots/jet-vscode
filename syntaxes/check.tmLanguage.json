{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "jet-lang",
	"patterns": [
		{
			"include": "#funcDecl"
		},
		{
			"include": "#hints"
		},
		{
			"include": "#atstrings"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#regex"
		},
		{
			"include": "#units"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#funcCall"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#booleans"
		},
		{
			"include": "#types"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#templateParams"
		},
		{
			"include": "#argLabelsOnNewLine"
		},
		{
			"include": "#lastResortIdents"
		}
	],
	"repository": {
		"funcDecjjjjjl": {
			"captures": {
				"1": {
					"name": "keyword.control.check"
				},
				"2": {
					"name": "entity.name.function.check"
				},
				"3": {
					"name": "meta.function-call.check"
				}
			},
			"match": "\\b(func|func decl|redef) ([a-z][.a-zA-Z0-9]*)?"
		},
		"constructor": {
			"captures": {
				"1": {
					"name": "keyword.operator.new"
				}
			},
			"match": "\\b([A-Z_][_a-zA-Z0-9]*)\\("
		},
		"funcCall": {
			"captures": {
				"1": {
					"name": "meta.function-call.check"
				},
				"2": {
					"name": "meta.function-call.check"
				},
				"3": {
					"name": "meta.function-call.check"
				}
			},
			"match": "\\b([a-z_][a-z_A-Z0-9~]*)(?=!?\\()"
		},
		"varikkkables": {
			"captures": {
				"1": {
					"name": "keyword.other.check"
				},
				"2": {
					"name": "xxxvariable.name.check"
				}
			},
			"match": "^\\s*(var) ([_a-zA-Z][a-zA-Z0-9]*)"
		},
		"argLabelsOnNewLineXXX": {
			"captures": {
				"1": {
					"name": "meta.function-call.check"
				},
				"2": {
					"name": "xxxxvariable.name.check"
				}
			},
			"match": "^\\s*([a-z][a-zA-Z0-9]*) ([a-z][a-zA-Z0-9]*)(: | = )"
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.check",
					"match": "\\b(?i)(while|elif|else|var|match|case|deprecated|type|enum|extends|func|decl|objc|def|redef|class|import|test|event|when|catch|hold|for|do|continue|extends|break|as|pass|yield|return|then|if|check|with|throw|raise|where|result|or (continue|pass|return|private|break|throw))\\b"
				},
				{
					"name": "keyword.control.check",
					"match": "^\\s*end\\b"
				},
				{
					"name": "keyword.control.check",
					"nameh": "constant.numeric.check",
					"match": "\\bend\\b"
				},
				{
					"name": "string.quoted.double.check",
					"match": "#[a-zA-Z0-9]+",
					"comment": "Inferred enum members"
				}
			]
		},
		"templateParams": {
			"patterns": [
				{
					"name": "xxxvariable.name.check",
					"match": "\\b(ch|os[.](path|info)|os|mac|net|http|ssh|ftp|pop|imap|dom|win|gtk|ui|str|io)[.]\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.check",
			"begin": "(\"|')",
			"end": "(?<!\\\\)\\1",
			"patterns": [
				{
					"name": "keyword.operator.logical.check",
					"match": "\\{[^{}]+\\}|\\['\"]|\\\\0\\d\\d|\\\\\\w"
				},
				{
					"name": "keyword.operator.logical.check",
					"match": "\\$[a-z.0-9A-Z]+|\\$\\([a-z.0-9,A-Z-]*\\)(\\([.0-9-]+\\))?"
				}
			]
		},
		"atstrings": {
			"name": "comment.line.check",
			"begin": "^\\s*---\\s*$",
			"end": "^\\s*---\\s*$",
			"patterns": [
				{
					"name": "constant.character.escape.check",
					"match": "^\\s*todo:"
				}
			]
		},
		"atstrihungs": {
			"name": "string.quoted.double.check",
			"begin": "(?<=@ *)(\"|')",
			"end": "(?<!\\\\)\\1",
			"patterns": [
				{
					"name": "constant.character.escape.check",
					"match": "\\{[a-z.0-9,A-Z*_/~-]*\\}|\\['\"]|\\\\0\\d\\d|\\\\\\w"
				}
			]
		},
		"regex": {
			"name": "constant.numeric.check",
			"begin": "`",
			"end": "`",
			"patterns": [
				{
					"name": "keyword.operator.logical.check",
					"match": "\\(\\?i\\)"
				},
				{
					"name": "comment.line.check",
					"match": "--.*$"
				}
			]
		},
		"units": {
			"captures": {
				"1": {
					"name": "string.units.check"
				}
			},
			"match": "(\\|[a-zA-Z1][a-zA-Z0-9./{}]*)"
		},
		"hints": {
			"patterns": [
				{
					"name": "keyword.operator.logical.check",
					"match": "~[a-z]+"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.check",
					"match": "--.*$"
				},
				{
					"name": "comment.line.check",
					"match": "^#!.*$"
				},
				{
					"captures": {
						"1": {
							"name": "variable.name.check"
						}
					},
					"match": "(\\||~ \\||[\\d.]+% \\|)"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"capturesjjjjj": {
						"1": {
							"name": "keyword.control.check"
						},
						"2": {
							"name": "keyword.control.check"
						},
						"3": {
							"name": "support.type.check"
						}
					},
					"matchbbbb": "\\b([A-Za-z_][a-z._A-Z0-9]*)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "support.type.check"
						},
						"2": {
							"name": "support.type.check"
						}
					},
					"match": "\\b([a-z][A-Za-z0-9.]*\\.)?([A-Z][a-zA-Z0-9]*)\\b"
				},
				{
					"capturesnnn": {
						"1": {
							"name": "keyword.control.check"
						}
					},
					"matchmmm": "^(value )"
				},
				{
					"captureshhhh": {
						"1": {
							"name": "support.type.check"
						}
					},
					"matchlll": "\\b::([A-Z][a-zA-Z0-9]*)\\b"
				},
				{
					"capturesmmm": {
						"1": {
							"name": "support.type.check"
						}
					},
					"matcnnnh": "(?<=\\[ *)([A-Z][a-z.A-Z, 0-9]*)(?= *\\])"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.logical.check",
					"match": "([<>!%=/+\\-.:*/]=|[<!_$@,%&>:?=+\\-\\\\*./^]|\\b(and|or|not in|not|in)\\b)"
				},
				{
					"name": "variable.name.check",
					"match": "(?<=&)[A-Za-z_][a-z.A-Z_0-9]*\\b"
				},
				{
					"name": "variable.name.check",
					"match": "[A-Za-z_][a-z.A-Z_0-9]*(?=\\!\\.)"
				},
				{
					"name": "variable.name.check",
					"match": "\\b[A-Za-z_][a-z.A-Z_0-9]*(?=\\.[A-Za-z_][A-Za-z0-9_]*\\!\\()"
				},
				{
					"name": "variable.name.check",
					"match": "(?<=\\()[a-z_A-Z][a-z._A-Z0-9]*(?=![^=])"
				},
				{
					"name": "variable.name.check",
					"match": "^\\s*[a-z_][a-z.A-Z_0-9]*(?=(\\[.*\\])? *([+-/*^%]=|= ))"
				},
				{
					"name": "variable.name.check",
					"match": "(?<= (then|do) ) *[a-z_][a-z._A-Z0-9]*(?=(\\[.*\\])? *([+-/*^%]=|= ))"
				},
				{
					"match": "(?<=\\[ *)([0-9]+D)\\b",
					"name": "keyword.operator.array.check"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.check",
					"match": "\\b-?[0-9']+(\\.[0-9']+)?([dDEe]-?[0-9']+)?[ikMGTPEYmun]?\\b|\\b-?[0-9]+x[0-9]+\\b|0x[a-fA-F0-9]+"
				},
				{
					"name": "constant.numeric.check",
					"match": "@[a-zA-Z0-9]+\\([a-zA-Z0-9, ]+\\)"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"name": "meta.function-call.check",
					"match": "[(){}\\[\\]]"
				}
			]
		},
		"booleans": {
			"patterns": [
				{
					"name": "constant.language.check",
					"match": "\\b(yes|no|nil|nan|inf|tiny|huge)\\b"
				}
			]
		},
		"lastResortIdents": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.operator.logical.check"
						}
					},
					"match": "(?<=[(,{]) ?([a-z][a-zA-Z0-9]*) ?(?==)"
				},
				{
					"name": "xxxvariable.name.check",
					"match": "\\b[a-z][A-Za-z0-9]*\\.\\b"
				}
			]
		}
	},
	"scopeName": "source.check"
}